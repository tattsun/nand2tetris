// init
@256 // 0
D=A // 1
@SP // 2
M=D // 3
// call Sys.init 0
@return.1 // 4
D=A // 5
@0 // 6
A=M // 7
M=D // 8
@0 // 9
M=M+1 // 10
@LCL // 11
D=M // 12
@0 // 13
A=M // 14
M=D // 15
@0 // 16
M=M+1 // 17
@ARG // 18
D=M // 19
@0 // 20
A=M // 21
M=D // 22
@0 // 23
M=M+1 // 24
@THIS // 25
D=M // 26
@0 // 27
A=M // 28
M=D // 29
@0 // 30
M=M+1 // 31
@THAT // 32
D=M // 33
@0 // 34
A=M // 35
M=D // 36
@0 // 37
M=M+1 // 38
@0 // 39
D=M // 40
@0 // 41
D=D-A // 42
@5 // 43
D=D-A // 44
@ARG // 45
M=D // 46
@0 // 47
D=M // 48
@LCL // 49
M=D // 50
@Sys.init // 51
0;JMP // 52
(return.1)
// function Main.fibonacci 0
(Main.fibonacci)
// C_PUSH argument:0
@ARG // 53
D=M // 54
@0 // 55
D=D+A // 56
A=D // 57
D=M // 58
@SP // 59
A=M // 60
M=D // 61
@0 // 62
M=M+1 // 63
// C_PUSH constant:2
@2 // 64
D=A // 65
@0 // 66
A=M // 67
M=D // 68
@0 // 69
M=M+1 // 70
// lt
@0 // 71
M=M-1 // 72
A=M // 73
D=M // 74
@0 // 75
M=M-1 // 76
A=M // 77
D=M-D // 78
@true_0 // 79
D;JLT // 80
@0 // 81
A=M // 82
M=0 // 83
@0 // 84
M=M+1 // 85
@after_0 // 86
0;JMP // 87
(true_0)
@0 // 88
A=M // 89
M=-1 // 90
@0 // 91
M=M+1 // 92
@after_0 // 93
0;JMP // 94
(after_0)
// if-goto IF_TRUE
@0 // 95
M=M-1 // 96
A=M // 97
D=M // 98
@Main.fibonacci$IF_TRUE // 99
D;JNE // 100
// goto IF_FALSE
@Main.fibonacci$IF_FALSE // 101
0;JMP // 102
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// C_PUSH argument:0
@ARG // 103
D=M // 104
@0 // 105
D=D+A // 106
A=D // 107
D=M // 108
@SP // 109
A=M // 110
M=D // 111
@0 // 112
M=M+1 // 113
// return
@LCL // 114
D=M // 115
@R13 // 116
M=D // 117
@R13 // 118
D=M // 119
@5 // 120
D=D-A // 121
A=D // 122
D=M // 123
@R14 // 124
M=D // 125
@0 // 126
M=M-1 // 127
A=M // 128
D=M // 129
@ARG // 130
A=M // 131
M=D // 132
@ARG // 133
D=M // 134
@1 // 135
D=D+A // 136
@SP // 137
M=D // 138
@R13 // 139
D=M // 140
@1 // 141
D=D-A // 142
A=D // 143
D=M // 144
@THAT // 145
M=D // 146
@R13 // 147
D=M // 148
@2 // 149
D=D-A // 150
A=D // 151
D=M // 152
@THIS // 153
M=D // 154
@R13 // 155
D=M // 156
@3 // 157
D=D-A // 158
A=D // 159
D=M // 160
@ARG // 161
M=D // 162
@R13 // 163
D=M // 164
@4 // 165
D=D-A // 166
A=D // 167
D=M // 168
@LCL // 169
M=D // 170
@R14 // 171
A=M // 172
0;JMP // 173
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// C_PUSH argument:0
@ARG // 174
D=M // 175
@0 // 176
D=D+A // 177
A=D // 178
D=M // 179
@SP // 180
A=M // 181
M=D // 182
@0 // 183
M=M+1 // 184
// C_PUSH constant:2
@2 // 185
D=A // 186
@0 // 187
A=M // 188
M=D // 189
@0 // 190
M=M+1 // 191
// sub
@0 // 192
M=M-1 // 193
A=M // 194
D=M // 195
@0 // 196
M=M-1 // 197
A=M // 198
M=M-D // 199
@0 // 200
M=M+1 // 201
// call Main.fibonacci 1
@return.2 // 202
D=A // 203
@0 // 204
A=M // 205
M=D // 206
@0 // 207
M=M+1 // 208
@LCL // 209
D=M // 210
@0 // 211
A=M // 212
M=D // 213
@0 // 214
M=M+1 // 215
@ARG // 216
D=M // 217
@0 // 218
A=M // 219
M=D // 220
@0 // 221
M=M+1 // 222
@THIS // 223
D=M // 224
@0 // 225
A=M // 226
M=D // 227
@0 // 228
M=M+1 // 229
@THAT // 230
D=M // 231
@0 // 232
A=M // 233
M=D // 234
@0 // 235
M=M+1 // 236
@0 // 237
D=M // 238
@1 // 239
D=D-A // 240
@5 // 241
D=D-A // 242
@ARG // 243
M=D // 244
@0 // 245
D=M // 246
@LCL // 247
M=D // 248
@Main.fibonacci // 249
0;JMP // 250
(return.2)
// C_PUSH argument:0
@ARG // 251
D=M // 252
@0 // 253
D=D+A // 254
A=D // 255
D=M // 256
@SP // 257
A=M // 258
M=D // 259
@0 // 260
M=M+1 // 261
// C_PUSH constant:1
@1 // 262
D=A // 263
@0 // 264
A=M // 265
M=D // 266
@0 // 267
M=M+1 // 268
// sub
@0 // 269
M=M-1 // 270
A=M // 271
D=M // 272
@0 // 273
M=M-1 // 274
A=M // 275
M=M-D // 276
@0 // 277
M=M+1 // 278
// call Main.fibonacci 1
@return.3 // 279
D=A // 280
@0 // 281
A=M // 282
M=D // 283
@0 // 284
M=M+1 // 285
@LCL // 286
D=M // 287
@0 // 288
A=M // 289
M=D // 290
@0 // 291
M=M+1 // 292
@ARG // 293
D=M // 294
@0 // 295
A=M // 296
M=D // 297
@0 // 298
M=M+1 // 299
@THIS // 300
D=M // 301
@0 // 302
A=M // 303
M=D // 304
@0 // 305
M=M+1 // 306
@THAT // 307
D=M // 308
@0 // 309
A=M // 310
M=D // 311
@0 // 312
M=M+1 // 313
@0 // 314
D=M // 315
@1 // 316
D=D-A // 317
@5 // 318
D=D-A // 319
@ARG // 320
M=D // 321
@0 // 322
D=M // 323
@LCL // 324
M=D // 325
@Main.fibonacci // 326
0;JMP // 327
(return.3)
// add
@0 // 328
M=M-1 // 329
A=M // 330
D=M // 331
@0 // 332
M=M-1 // 333
A=M // 334
M=D+M // 335
@0 // 336
M=M+1 // 337
// return
@LCL // 338
D=M // 339
@R13 // 340
M=D // 341
@R13 // 342
D=M // 343
@5 // 344
D=D-A // 345
A=D // 346
D=M // 347
@R14 // 348
M=D // 349
@0 // 350
M=M-1 // 351
A=M // 352
D=M // 353
@ARG // 354
A=M // 355
M=D // 356
@ARG // 357
D=M // 358
@1 // 359
D=D+A // 360
@SP // 361
M=D // 362
@R13 // 363
D=M // 364
@1 // 365
D=D-A // 366
A=D // 367
D=M // 368
@THAT // 369
M=D // 370
@R13 // 371
D=M // 372
@2 // 373
D=D-A // 374
A=D // 375
D=M // 376
@THIS // 377
M=D // 378
@R13 // 379
D=M // 380
@3 // 381
D=D-A // 382
A=D // 383
D=M // 384
@ARG // 385
M=D // 386
@R13 // 387
D=M // 388
@4 // 389
D=D-A // 390
A=D // 391
D=M // 392
@LCL // 393
M=D // 394
@R14 // 395
A=M // 396
0;JMP // 397
// function Sys.init 0
(Sys.init)
// C_PUSH constant:4
@4 // 398
D=A // 399
@0 // 400
A=M // 401
M=D // 402
@0 // 403
M=M+1 // 404
// call Main.fibonacci 1
@return.4 // 405
D=A // 406
@0 // 407
A=M // 408
M=D // 409
@0 // 410
M=M+1 // 411
@LCL // 412
D=M // 413
@0 // 414
A=M // 415
M=D // 416
@0 // 417
M=M+1 // 418
@ARG // 419
D=M // 420
@0 // 421
A=M // 422
M=D // 423
@0 // 424
M=M+1 // 425
@THIS // 426
D=M // 427
@0 // 428
A=M // 429
M=D // 430
@0 // 431
M=M+1 // 432
@THAT // 433
D=M // 434
@0 // 435
A=M // 436
M=D // 437
@0 // 438
M=M+1 // 439
@0 // 440
D=M // 441
@1 // 442
D=D-A // 443
@5 // 444
D=D-A // 445
@ARG // 446
M=D // 447
@0 // 448
D=M // 449
@LCL // 450
M=D // 451
@Main.fibonacci // 452
0;JMP // 453
(return.4)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE // 454
0;JMP // 455
