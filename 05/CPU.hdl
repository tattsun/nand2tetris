// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=instA);

    Or(a=instA, b=instruction[5], out=saveA);
    ARegister(in=inA, load=saveA, out=outA, out[0..14]=addressM);

    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM);

    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=writeM);

    // Compare
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=jgt);
    And(a=zr, b=true, out=jeq);
    Or(a=zr, b=notng, out=jge);
    And(a=notzr, b=ng, out=jlt);
    And(a=notzr, b=true, out=jne);
    Or(a=zr, b=ng, out=jle);


    DMux8Way(in=true, sel=instruction[0..2], a=Inojmp, b=Ijgt, c=Ijeq, d=Ijge, e=Ijlt, f=Ijne, g=Ijle, h=Ijmp);

    And(a=jgt, b=Ijgt, out=Rjgt);
    And(a=jeq, b=Ijeq, out=Rjeq);
    And(a=jge, b=Ijge, out=Rjge);
    And(a=jlt, b=Ijlt, out=Rjlt);
    And(a=jne, b=Ijne, out=Rjne);
    And(a=jle, b=Ijle, out=Rjle);
    
    Or(a=Rjgt, b=Rjeq, out=w1);
    Or(a=w1, b=Rjge, out=w2);
    Or(a=w2, b=Rjlt, out=w3);
    Or(a=w3, b=Rjne, out=w4);
    Or(a=w4, b=Rjle, out=w5);
    Or(a=w5, b=Rjgt, out=w6);
    Or(a=w6, b=Ijmp, out=w7);
    And(a=w7, b=instruction[15], out=loadPC);
    Not(in=loadPC, out=notLoadPC);
    
    Or(a=Inojmp, b=instA, out=x1);
    Or(a=x1, b=notLoadPC, out=Rnojmp);

    PC(in=outA, load=loadPC, inc=Rnojmp, reset=reset, out[0..14]=pc);
}